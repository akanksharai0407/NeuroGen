# -*- coding: utf-8 -*-
"""NeuroGen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AUc0YmwGSgvNzxZzo23qvXpGrFLefsdx
"""

# Install all dependencies
!pip install kaggle
!pip install gTTS
!pip install transformers
!pip install seaborn

# Import all libraries

# System & I/O
import os
import random
import numpy as np
import pandas as pd

# Visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Audio
from gtts import gTTS
import IPython.display as ipd
import tempfile

# PyTorch
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader, random_split

# Sklearn
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

# Transformers
from transformers import GPT2LMHeadModel, GPT2Tokenizer

"""# Kaggle Setup and Dataset Download"""

# Kaggle API setup

!mkdir -p ~/.kaggle
!cp /content/kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d birdy654/eeg-brainwave-dataset-feeling-emotions
!unzip eeg-brainwave-dataset-feeling-emotions.zip -d eeg_emotion_data

df = pd.read_csv('/content/eeg_emotion_data/emotions.csv')

print("Shape:", df.shape)
print("Columns:", df.columns[:5].tolist(), '...')
df.head()

"""# Preprocess the Data"""

# Encode emotion labels and normalize EEG features

label_encoder = LabelEncoder()
df['label_encoded'] = label_encoder.fit_transform(df['label'])

X = df.drop(['label', 'label_encoded'], axis=1).values
y = df['label_encoded'].values

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("Encoded labels:", dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_))))
print("Feature shape:", X_scaled.shape)

"""# Train/Validation/Test Split"""

# Stratified train/validation/test split

X_train, X_temp, y_train, y_temp = train_test_split(X_scaled, y, test_size=0.3, random_state=42, stratify=y)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42, stratify=y_temp)

print("Train size:", len(X_train))
print("Validation size:", len(X_val))
print("Test size:", len(X_test))

"""# PyTorch Dataset and DataLoaders"""

# Creating EEGDataset class and DataLoaders

class EEGDataset(Dataset):
    def __init__(self, X, y):
        self.X = torch.tensor(X, dtype=torch.float32)
        self.y = torch.tensor(y, dtype=torch.long)

    def __len__(self):
        return len(self.y)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

batch_size = 64

train_dataset = EEGDataset(X_train, y_train)
val_dataset = EEGDataset(X_val, y_val)
test_dataset = EEGDataset(X_test, y_test)

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=batch_size)
test_loader = DataLoader(test_dataset, batch_size=batch_size)

"""# CNN"""

class EEG_CNN(nn.Module):
    def __init__(self, input_size, num_classes):
        super(EEG_CNN, self).__init__()
        self.conv1 = nn.Conv1d(1, 16, kernel_size=5, stride=1)
        self.pool = nn.MaxPool1d(kernel_size=2)
        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, stride=1)
        conv_output_size = ((input_size - 4) // 2 - 2) // 2
        self.fc1 = nn.Linear(32 * conv_output_size, 64)
        self.fc2 = nn.Linear(64, num_classes)

    def forward(self, x):
        x = x.unsqueeze(1)
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        return self.fc2(x)

input_size = X_train.shape[1]
num_classes = 3

model = EEG_CNN(input_size=input_size, num_classes=num_classes)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# Training the CNN model

def train_model(model, train_loader, val_loader, epochs=20, lr=0.001):
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)

    for epoch in range(epochs):
        model.train()
        total_loss = 0
        correct = 0

        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            total_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            correct += (predicted == labels).sum().item()

        train_acc = correct / len(train_loader.dataset)

        # Validation
        model.eval()
        val_correct = 0
        with torch.no_grad():
            for inputs, labels in val_loader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)
                _, predicted = torch.max(outputs, 1)
                val_correct += (predicted == labels).sum().item()

        val_acc = val_correct / len(val_loader.dataset)

        print(f"Epoch {epoch+1}: Loss = {total_loss:.4f}, Train Acc = {train_acc:.4f}, Val Acc = {val_acc:.4f}")

train_model(model, train_loader, val_loader, epochs=20, lr=0.001)

# Evaluation of the model on test set

model.eval()
all_preds = []
all_labels = []

with torch.no_grad():
    for inputs, labels in test_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        _, predicted = torch.max(outputs, 1)
        all_preds.extend(predicted.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())

print(classification_report(all_labels, all_preds, target_names=label_encoder.classes_))

# Confusion matrix
cm = confusion_matrix(all_labels, all_preds)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")
plt.show()

"""# EEGNet"""

class EEGNet(nn.Module):
    def __init__(self, input_size, num_classes):
        super(EEGNet, self).__init__()
        self.layer1 = nn.Sequential(
            nn.Conv1d(1, 8, kernel_size=64, padding=32, bias=False),
            nn.BatchNorm1d(8),
            nn.Conv1d(8, 16, kernel_size=1, bias=False),
            nn.BatchNorm1d(16),
            nn.ELU(),
            nn.AvgPool1d(kernel_size=4),
            nn.Dropout(0.25)
        )
        self.layer2 = nn.Sequential(
            nn.Conv1d(16, 32, kernel_size=16, padding=8, bias=False),
            nn.BatchNorm1d(32),
            nn.ELU(),
            nn.AvgPool1d(kernel_size=8),
            nn.Dropout(0.25)
        )
        self.fc = nn.Linear(self._get_flattened_size(input_size), num_classes)

    def _get_flattened_size(self, input_size):
        with torch.no_grad():
            x = torch.zeros(1, 1, input_size)
            x = self.layer1(x)
            x = self.layer2(x)
            return x.shape[1] * x.shape[2]

    def forward(self, x):
        x = x.unsqueeze(1)
        x = self.layer1(x)
        x = self.layer2(x)
        x = x.view(x.size(0), -1)
        return self.fc(x)

# Initialize EEGNet

eegnet_model = EEGNet(input_size=X_train.shape[1], num_classes=3)
eegnet_model.to(device)

# Train EEGNet
train_model(eegnet_model, train_loader, val_loader, epochs=20, lr=0.001)

# Evaluate EEGNet on test set
eegnet_model.eval()
all_preds = []
all_labels = []

with torch.no_grad():
    for inputs, labels in test_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = eegnet_model(inputs)
        _, predicted = torch.max(outputs, 1)
        all_preds.extend(predicted.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())

print(classification_report(all_labels, all_preds, target_names=label_encoder.classes_))

cm = confusion_matrix(all_labels, all_preds)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("EEGNet â€“ Confusion Matrix")
plt.show()

"""# LSTM"""

# Reshaping the features for LSTM input

time_steps = 49
features_per_step = 52

X_train_seq = X_train.reshape(-1, time_steps, features_per_step)
X_val_seq   = X_val.reshape(-1, time_steps, features_per_step)
X_test_seq  = X_test.reshape(-1, time_steps, features_per_step)

print("Reshaped X_train:", X_train_seq.shape)

# PyTorch Dataset for LSTM
class EEGLSTMDataset(Dataset):
    def __init__(self, X, y):
        self.X = torch.tensor(X, dtype=torch.float32)
        self.y = torch.tensor(y, dtype=torch.long)

    def __len__(self):
        return len(self.y)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

batch_size = 64

train_dataset_lstm = EEGLSTMDataset(X_train_seq, y_train)
val_dataset_lstm = EEGLSTMDataset(X_val_seq, y_val)
test_dataset_lstm = EEGLSTMDataset(X_test_seq, y_test)

train_loader_lstm = DataLoader(train_dataset_lstm, batch_size=batch_size, shuffle=True)
val_loader_lstm = DataLoader(val_dataset_lstm, batch_size=batch_size)
test_loader_lstm = DataLoader(test_dataset_lstm, batch_size=batch_size)

class EEG_LSTM(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers, num_classes, dropout=0.5):
        super(EEG_LSTM, self).__init__()
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True, dropout=dropout)
        self.fc = nn.Linear(hidden_size, num_classes)

    def forward(self, x):
        h0 = torch.zeros(self.lstm.num_layers, x.size(0), self.lstm.hidden_size).to(x.device)
        c0 = torch.zeros(self.lstm.num_layers, x.size(0), self.lstm.hidden_size).to(x.device)
        out, _ = self.lstm(x, (h0, c0))
        out = out[:, -1, :]  # Taking the last time step output
        out = self.fc(out)
        return out

input_size = 52
hidden_size = 64
num_layers = 2
num_classes = 3

model_lstm = EEG_LSTM(input_size, hidden_size, num_layers, num_classes).to(device)

# Training the LSTM model
train_model(model_lstm, train_loader_lstm, val_loader_lstm, epochs=20, lr=0.001)

# Evaluating LSTM on test set
model_lstm.eval()
all_preds = []
all_labels = []

with torch.no_grad():
    for inputs, labels in test_loader_lstm:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model_lstm(inputs)
        _, predicted = torch.max(outputs, 1)
        all_preds.extend(predicted.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())

print(classification_report(all_labels, all_preds, target_names=label_encoder.classes_))

cm = confusion_matrix(all_labels, all_preds)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("LSTM â€“ Confusion Matrix")
plt.show()

"""# Knowledge Distillation"""

# Smaller Student Model
class StudentCNN(nn.Module):
    def __init__(self, input_size, num_classes):
        super(StudentCNN, self).__init__()
        self.conv = nn.Conv1d(1, 8, kernel_size=5, stride=1)
        self.pool = nn.MaxPool1d(2)
        conv_output_size = (input_size - 4) // 2
        self.fc1 = nn.Linear(8 * conv_output_size, 32)
        self.fc2 = nn.Linear(32, num_classes)

    def forward(self, x):
        x = x.unsqueeze(1)
        x = self.pool(F.relu(self.conv(x)))
        x = x.view(x.size(0), -1)
        x = F.relu(self.fc1(x))
        return self.fc2(x)

student_model = StudentCNN(input_size=X_train.shape[1], num_classes=3).to(device)

# Distillation Loss Function
def distillation_loss(y_student, y_teacher, y_true, temperature=4, alpha=0.7):
    """
    y_student: logits from student
    y_teacher: logits from teacher
    y_true: true labels
    temperature: softening temperature
    alpha: weight for soft loss
    """
    soft_loss = nn.KLDivLoss()(F.log_softmax(y_student/temperature, dim=1),
                               F.softmax(y_teacher/temperature, dim=1)) * (temperature**2)
    hard_loss = F.cross_entropy(y_student, y_true)
    return alpha * soft_loss + (1 - alpha) * hard_loss

# Training student with distillation
def train_distillation(student_model, teacher_model, train_loader, val_loader, epochs=20, lr=0.001):
    optimizer = optim.Adam(student_model.parameters(), lr=lr)
    teacher_model.eval()

    for epoch in range(epochs):
        student_model.train()
        total_loss = 0
        correct = 0

        for inputs, labels in train_loader:
            inputs, labels = inputs.to(device), labels.to(device)

            with torch.no_grad():
                teacher_outputs = teacher_model(inputs)

            optimizer.zero_grad()
            student_outputs = student_model(inputs)

            loss = distillation_loss(student_outputs, teacher_outputs, labels)
            loss.backward()
            optimizer.step()

            total_loss += loss.item()
            _, predicted = torch.max(student_outputs, 1)
            correct += (predicted == labels).sum().item()

        train_acc = correct / len(train_loader.dataset)

        # Validation
        student_model.eval()
        val_correct = 0
        with torch.no_grad():
            for inputs, labels in val_loader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = student_model(inputs)
                _, predicted = torch.max(outputs, 1)
                val_correct += (predicted == labels).sum().item()

        val_acc = val_correct / len(val_loader.dataset)

        print(f"Epoch {epoch+1}: Loss = {total_loss:.4f}, Train Acc = {train_acc:.4f}, Val Acc = {val_acc:.4f}")

# distillation training
train_distillation(student_model, model, train_loader, val_loader, epochs=20, lr=0.001)

# evaluating distilled student model on test set
student_model.eval()
all_preds = []
all_labels = []

with torch.no_grad():
    for inputs, labels in test_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = student_model(inputs)
        _, predicted = torch.max(outputs, 1)
        all_preds.extend(predicted.cpu().numpy())
        all_labels.extend(labels.cpu().numpy())

print(classification_report(all_labels, all_preds, target_names=label_encoder.classes_))

cm = confusion_matrix(all_labels, all_preds)
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Distilled Student Model â€“ Confusion Matrix")
plt.show()

"""# Comparative Analysis"""

model_results = {
    'Model': ['1D CNN (Teacher)', 'EEGNet', 'LSTM', 'Distilled CNN'],
    'Test Accuracy': [0.98, 0.96, 0.93, 0.97],
    'Macro F1 Score': [0.98, 0.96, 0.93, 0.97],
    'Notes': [
        'Largest model, highest accuracy',
        'EEG-specific, compact',
        'Temporal dynamics captured',
        'Smallest, nearly same accuracy'
    ]
}

results_df = pd.DataFrame(model_results)
print(results_df)

plt.figure(figsize=(8,5))
plt.bar(results_df['Model'], results_df['Test Accuracy'], color=['blue', 'orange', 'green', 'red'])
plt.ylim([0.9, 1.0])
plt.title('Test Accuracy Comparison of Models')
plt.ylabel('Accuracy')
plt.xticks(rotation=15)
plt.grid(axis='y')
plt.show()

"""# GPT-2 Text Generation + TTS"""

# GPT-2 Text Generation
tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model_gpt2 = GPT2LMHeadModel.from_pretrained("gpt2")
model_gpt2.eval()

def generate_sentence_gpt2(emotion_label, max_length=30):
    prompt = f"The person is feeling {emotion_label.lower()}. Encourage them with a helpful sentence:"
    input_ids = tokenizer.encode(prompt, return_tensors='pt')

    with torch.no_grad():
        output = model_gpt2.generate(
            input_ids,
            max_length=max_length,
            num_return_sequences=1,
            no_repeat_ngram_size=2,
            pad_token_id=tokenizer.eos_token_id
        )

    generated_text = tokenizer.decode(output[0], skip_special_tokens=True)
    sentence = generated_text.replace(prompt, "").strip()
    return sentence

# Example
for emotion in ['NEGATIVE', 'NEUTRAL', 'POSITIVE']:
    print(f"{emotion} â†’ {generate_sentence_gpt2(emotion)}")

# Text-to-Speech (TTS) Using gTTS
def speak_text(text, lang='en'):
    tts = gTTS(text=text, lang=lang)
    with tempfile.NamedTemporaryFile(delete=True) as fp:
        tts.save("temp.mp3")
        return ipd.Audio("temp.mp3")

# Example
sample_text = generate_sentence_gpt2('POSITIVE')
print("Generated sentence:", sample_text)
speak_text(sample_text)

"""# Sample Predictions and Outputs"""

emotions = ['NEGATIVE', 'NEUTRAL', 'POSITIVE']

for emotion in emotions:
    sentence = generate_sentence_gpt2(emotion)
    print(f"Emotion: {emotion}")
    print(f"Generated sentence: {sentence}")
    display(speak_text(sentence))
    print('---')